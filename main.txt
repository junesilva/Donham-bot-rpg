import discord
import config
import player
import adm
from discord.ext import commands

intents = discord.Intents.default()
intents.typing = True  # Desativar a intenção de "digitação"
intents.presences = True  # Desativar a intenção de "presenças"

# Crie uma instância do bot com as intenções
bot = commands.Bot(command_prefix=config.PREFIX, intents=intents)

# Caminho do arquivo para salvar os jogadores e administradores
player = 'jogadores.txt'
adm = 'admin.py'

# Lista para armazenar os jogadores e administradores
#jogadores = []
#administradores = []

# Carregar jogadores do arquivo
def carregar_jogadores():
    try:
        with open(player, 'r') as file:
            for line in file:
                jogador_id = int(line.strip())
                jogador = bot.get_user(jogador_id)
                if jogador:
                    player.append(jogador)
    except FileNotFoundError:
        print('Arquivo de jogadores não encontrado. Será criado ao salvar.')

# Salvar jogadores no arquivo
def salvar_jogadores():
    with open(player, 'w') as file:
        for jogador in player:
            file.write(str(jogador.id) + '\n')

# Carregar administradores do arquivo
def carregar_administradores():
    try:
        with open(administradores, 'r') as file:
            for line in file:
                admin_id = int(line.strip())
                admin = bot.get_user(admin_id)
                if admin:
                    administradores.append(admin)
    except FileNotFoundError:
        print('Arquivo de administradores não encontrado. Será criado ao salvar.')

# Salvar administradores no arquivo
def salvar_administradores():
    with open(administradores, 'w') as file:
        for admin in administradores:
            file.write(str(admin.id) + '\n')

# Evento de inicialização
@bot.event
async def on_ready():
    await bot.change_presence(activity=discord.Game(f"{config.PREFIX}help"))
    print(f'Bot conectado como {bot.user.name}')
    carregar_jogadores()
    carregar_administradores()

# Comando !hello
@bot.command(name='oi')
async def hello(ctx):
    await ctx.send('Olá! Eu sou o Domhan.')

# Comando !ping
@bot.command()
async def ping(ctx):
    await ctx.send(f'pong, latencia de {round(bot.latency * 1000, 1)}ms')

# Comando !começar
@bot.command()
async def start(ctx):
    # Verifica se o jogador já está na lista de jogadores
    if ctx.author in player:
        await ctx.send('Você já está participando do RPG.')
    else:
        player.append(ctx.author)
        await ctx.send('Você agora está participando do RPG!')
        salvar_jogadores()

# Comando !perfil
@bot.command()
async def profile(ctx):
    # Verifica se o jogador está na lista de jogadores
    if ctx.author in player:
        jogador = ctx.author
        embed = discord.Embed(title="Perfil do Jogador", color=discord.Color.blue())
        embed.add_field(name="Nome", value=jogador.display_name, inline=False)
        embed.add_field(name="Vida", value="100/100", inline=False)
        embed.add_field(name="Mana", value="50/50", inline=False)
        embed.add_field(name="Nível", value="1", inline=True)
        await ctx.send(embed=embed)
    else:
        await ctx.send('Você precisa começar o RPG primeiro usando o comando !começar.')

# Comando !sair
@bot.command()
async def exit(ctx):
    # Verifica se o jogador está na lista de jogadores
    if ctx.author in player:
        player.remove(ctx.author)
        await ctx.send('Você saiu do RPG.')
        salvar_jogadores()
    else:
        await ctx.send('Você não está participando do RPG.')

# Comando !quest
@bot.command()
async def quest(ctx):
    # Verifica se o jogador está na lista de jogadores
    if ctx.author in player:
        # Simula a obtenção de quests
        quests = ['Derrotar um monstro', 'Encontrar um tesouro', 'Resgatar um prisioneiro']

        embed = discord.Embed(title="Quests do Jogador", color=discord.Color.green())
        for i, quest in enumerate(quests, start=1):
            embed.add_field(name=f"Quest {i}", value=quest, inline=False)

        await ctx.send(embed=embed)
    else:
        await ctx.send('Você precisa começar o RPG primeiro usando o comando !começar.')

# Comando !desligar
@bot.command()
@commands.has_permissions(administrator=True)
async def turn_off(ctx):
    await ctx.send('O bot está sendo desligado. Adeus!')
    salvar_jogadores()
    salvar_administradores()
    await bot.close()

@turn_off.error
async def turn_off_error(ctx, error):
    if isinstance(error, commands.MissingPermissions):
        await ctx.send('Você não tem permissão para usar esse comando.')

# Comando !add_admin
@bot.command()
@commands.has_permissions(administrator=True)
async def add_admin(ctx, user_id: int):
    admin = bot.get_user(user_id)
    if admin:
        administradores.append(admin)
        await ctx.send(f'{admin.name}#{admin.discriminator} foi adicionado como administrador.')
        salvar_administradores()
    else:
        await ctx.send('Usuário não encontrado.')

# Rodar o bot
bot.run(config.TOKEN)
